BEGIN calculate(rank, size)

    IF inf_func == FUNC_FPISIN DO
        fpisin := 0.25 * TWO_PI_SQUARE * h * h
    END IF

    lines := calculate_lines(rank, size, interlines)
    term_iteration += rank
    iteration := 0
    help := 0
    start := 0
    FOR i TO rank DO
        start += calculate_lines(i, size, interlines)
    END FOR

    WHILE term_iteration > 0 && (help == 0 || help == 1) DO

        IF termination == TERM_PREC && help == 1 DO
            term_iteration--
        END IF

        maxresiduum := 0

        IF rank < (size - 1) DO
            MPI_Send(Matrix[0][lines], N + 1, MPI_DOUBLE, rank + 1, rank, MPI_COMM_WORLD)
        END IF
            IF rank > 0 DO
                IF term_iteration > 1 DO
                    MPI_Recv(Matrix[0][0], N + 1, MPI_DOUBLE, rank - 1, rank - 1, MPI_COMM_WORLD, &status)
                    MPI_Send(Matrix[0][1], N + 1, MPI_DOUBLE, rank - 1, rank, MPI_COMM_WORLD)
                END IF
            END IF

            IF rank < (size - 1) && term_iteration > 1 DO
                MPI_Recv(Matrix[0][lines + 1], N + 1, MPI_DOUBLE, rank + 1, rank + 1, MPI_COMM_WORLD, &status)
            END IF
        END IF

        IF rank < iteration DO
            FOR i TO lines DO

                fpisin_i := 0
                IF inf_func == FUNC_FPISIN DO
                    fpisin_i := fpisin * sin(PI * h * i + start)
                END IF

                FOR j TO N DO
                    star := 0.25 * (Matrix[0][i - 1][j] + Matrix[0][i][j - 1] + Matrix[0][i][j + 1] + Matrix[0][i + 1][j])

                    IF inf_func == FUNC_FPISIN DO
                        star += fpisin_i * sin(pih * j)
                    END IF

                    IF termination == TERM_PREC || term_iteration == 1 DO
                        residuum := Matrix[0][i][j] - star
                        residuum := (residuum < 0) ? -residuum : residuum
                        maxresiduum := max(maxresiduum, residuum)
                    END IF

                    Matrix[0][i][j] := star
                END FOR
            END FOR
        END IF

        IF termination == TERM_PREC DO
            IF maxresiduum < term_precision DO
                term_iteration := 0
            END IF

            MPI_Allreduce(&term_iteration, &term_iteration, 1, MPI_INT, MPI_MAX, MPI_COMM_WORLD)

            IF term_iteration == 0 DO
                help := 1
                term_iteration := term_iteration + myrank
            END IF
        ELSE IF termination == TERM_ITER DO
            term_iteration--
        END IF

    END WHILE
END calculate


BEGIN calculate_lines(rank, size, interlines)
    lines := 8 * interlines + 9 - 2

    IF lines % size == 0 DO
        RETURN lines / size
    ELSE IF rank >= size - (lines % size)) DO
        RETURN lines / size + 1
    ELSE DO
        // Der Rest wird auf die letzten Prozesse aufgeteilt
        RETURN lines / size
    END IF
END calculate_lines
