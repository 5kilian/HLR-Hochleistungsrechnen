
1) Debugging von C-Programmen

1.1)

$ gdb ./simple

(gdb) break mistake1
Breakpoint 1 at 0x555555554752: file simple.c, line 11.

(gdb) run
Starting program: $PATH_TO_SIMPLE/simple

Breakpoint 1, mistake1 () at simple.c:11
11	{

(gdb) print buf
$1 = {194, 0, -6714, 32767, 1, 0}

(gdb) print buf[2]
$2 = -6714

(gdb) next
12	  int buf[] = { 1, 1, 2, 3, 4, 5 };

(gdb) print buf
$3 = {194, 0, -6714, 32767, 1, 0}

(gdb) print buf[2]
$4 = -6714

(gdb) ptype buf
type = int [6]

(gdb) break mistake2
Breakpoint 2 at 0x5555555547ae: file simple.c, line 19.

(gdb) continue
Continuing.

Breakpoint 2, mistake2 () at simple.c:19
19	  int *buf = malloc (sizeof (char) * 4);

(gdb) ptype buf
type = int *

(gdb) continue
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00005555555547ea in mistake3 () at simple.c:30
30	  buf[0] = 3;

(gdb) list
25	mistake3 ()
26	{
27	  /* In dieser Funktion darf kein Speicher direkt allokiert werden. */
28	  int mistake2_ = 0;
29	  int *buf = (int *) &mistake2;
30	  buf[0] = 3;
31	  return buf;
32	}
33
34	int *

(gdb) bt
#0  0x00005555555547ea in mistake3 () at simple.c:30
#1  0x0000555555554871 in main () at simple.c:47

(gdb) select-frame 1

(gdb) frame
#1  0x0000555555554871 in main () at simple.c:47
47	  int *p[4] = { &mistake1 ()[1], &mistake2 ()[1], mistake3 (), mistake4 () };

(gdb) print p
$5 = {0x4, 0x555555756264, 0x555555554910 <__libc_csu_init>, 0x555555554640 <_start>}

(gdb) call mistake4
$6 = {int *()} 0x5555555547f6 <mistake4>

