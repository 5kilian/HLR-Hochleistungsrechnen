askparams.c:

    Fehler 1:
        GDB output:
            Program received signal SIGSEGV, Segmentation fault.
            askparams.c:197	        sscanf (argV[333], "%d", interlines);

        Fehlerart:
            Argument von argV außerhalb der Grenzen

        Änderung:
            Zeile 197:
            - sscanf (argV[333], "%d", interlines);
                                                    + sscanf (argV[3], "%d", interlines);

partdiff-seq.c:

    Fehler 2:
        GDB output:
            Program received signal SIGSEGV, Segmentation fault.
            partdiff-seq.c:133      Matrix[g][i][j] = 0;

        Fehlerart:
            Berechnung des Speicherplatzes fehlerhaft. (N+1)

        Änderung:
            Zeile 96:
            - M = malloc (sizeof (double) * (N + 1) * (N - 1) * 2);
                                                    + M = malloc (sizeof (double) * (N + 1) * (N + 1) * 2);

    Fehler 3:
        GDB output:
            Program received signal SIGSEGV, Segmentation fault.
            partdiff-seq.c:230	    Matrix[j - 1][m2][i] + 4 * Matrix[m2][i][j]

        Fehlerart:
            Reihenfolge der Argumente verdreht [m2]

        Änderung:
            Zeile 230:
            - - Matrix[j - 1][m2][i] + 4 * Matrix[m2][i][j] -
                                                    + - Matrix[m2][i][j-1] + 4 * Matrix[m2][i][j] -

    Fehler 4:
        Valgrind output:
            Invalid read of size 8
            Address 0x553c488 is 8 bytes inside a block of size 16 free'd
            Block was alloc'd at

        Fehlerart:
            Bedingung if (Matrix != 0) fehlte
            Speicher der Matrix M wurde nicht deallokiert. In Funktion freeMatrices() eingefügt
            Reihenfolge der free()-Befehle stimmte nicht.

        Änderung:
            Zeile 166:
              - free (Matrix);
              if (Matrix[1] != 0)
                free (Matrix[1]);
              if (Matrix[0] != 0)
                free (Matrix[0]);
                                                    + if (Matrix != 0)
                                                    +     free (Matrix);
                                                    + if (M != 0)
                                                    +     free(M);
